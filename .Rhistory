qplot( train$Log_Weekly_Sales ,
data = train ,
geom = "histogram" ) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "log( Weekly Sales )" )
range( train$Log_Weekly_Sales )
(range( train$Log_Weekly_Sales )[2]-range( train$Log_Weekly_Sales )[1])
(range( train$Log_Weekly_Sales )[2]-range( train$Log_Weekly_Sales )[1])/30
qplot(
train$Log_Weekly_Sales ,
data = train ,
geom = "histogram" ,
binwidth = .4) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "log( Weekly Sales )" )
qplot(
train$Log_Weekly_Sales ,
data = train ,
geom = "histogram" ,
binwidth = .2) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "log( Weekly Sales )" )
ggplot( train, aes( x = Weekly_Sales ) ) +
geom_histogram(binwidth=10000 ) + #, colour="black", fill="white") +
geom_vline( aes( xintercept = mean( Weekly_Sales ) ),
color="red", linetype="dashed", size=1)
ggplot( train, aes( x = Weekly_Sales ) ) +
geom_histogram(binwidth=5000 ) + #, colour="black", fill="white") +
geom_vline( aes( xintercept = mean( Weekly_Sales ) ))
ggplot( train, aes( x = Weekly_Sales ) ) +
geom_histogram(binwidth=2500 ) + #, colour="black", fill="white") +
geom_vline( aes( xintercept = mean( Weekly_Sales ) ),
color="red")
ggplot( train, aes( x = Weekly_Sales ) ) +
geom_histogram(binwidth=2500 ) + #, colour="black", fill="white") +
geom_vline( aes( xintercept = mean( Weekly_Sales ) ), color="red") +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "Weekly Sales" )
ggplot( train, aes( x = Weekly_Sales ) ) +
geom_histogram(binwidth=5000 ) + #, colour="black", fill="white") +
geom_vline( aes( xintercept = mean( Weekly_Sales ) ), color="red") +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "Weekly Sales" )
## plotting the log( Weekly_Sales ) histogram
ggplot( train, aes( x = Weekly_Sales ) ) +
geom_histogram(binwidth=.2 ) +
## Vertical line indicating the mean value
geom_vline( aes( xintercept = mean( Log_Weekly_Sales ) ), color="red" ) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "Weekly Sales" )
ggplot( train, aes( x = Log_Weekly_Sales ) ) +
geom_histogram(binwidth=.2 ) +
## Vertical line indicating the mean value
geom_vline( aes( xintercept = mean( Log_Weekly_Sales ) ), color="red" ) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "Weekly Sales" )
exp(3580548.716211106)
exp(13.448928645)
ggplot( stores , aes( x = Size ) ) +
#geom_histogram(binwidth=.2 ) +
## Vertical line indicating the mean value
geom_vline( aes( xintercept = mean( Size ) ), color="red" ) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "Store Size" )
summary(stores$Size)
ggplot( stores , aes( x = Size ) )
ggplot( stores , aes( x = Size ) ) +
geom_histogram()#
(219600-34880)30
(219600-34880)/30
ggplot( stores , aes( x = Size ) ) +
geom_histogram(binwidth=1000 )
ggplot( stores , aes( x = Size ) ) +
geom_histogram(binwidth=2000 )
ggplot( stores , aes( x = Size ) ) +
geom_histogram(binwidth=2000 ) +
## Vertical line indicating the mean value
geom_vline( aes( xintercept = mean( Size ) ), color="red" ) +
scale_y_continuous( "Frequency of Occurance" ) +
scale_x_continuous( "Store Size" )
ggplot(data=stores,
aes(x=Type, y=Size, fill=Type) ) +
geom_boxplot(outlier.shape = 15, outlier.size = 4) +
## to show how the individual store sales are distributed
geom_jitter() +
scale_y_continuous( name="Store Size" ) +
scale_fill_brewer( name = "Store Type" , palette = "Dark2")
storeSizeSD <- tapply( stores$Size , stores$Type , sd)
storeSizeSD
storeSizeSD <- tapply( stores$Size , stores$Type , c(sd,min) )
storeSizeSD <- tapply( stores$Size , stores$Type , sd , min)
list()
list()
ls
ls()
knitr::opts_chunk$set(cache=FALSE, out.width='800px' , dpi=200 )
source('~/.active-rstudio-document', echo=TRUE)
Hyp_NotHoliday <- subset( trainStoresFeaturesMerge , IsHoliday == FALSE );
Hyp_Holiday <- subset( trainStoresFeaturesMerge , IsHoliday == TRUE );
.095*29560
set.seed(100)
##
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , 2500 )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , 2500 )
## Calculating the Difference
MuDiff = Holiday_Sample - NotHoliday_Sample
rm(MuDiff)
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
View(standardError)
View(standardError)
## Calculating the Test Statistic
zValue <- xBar - 0 / standardError(Diff_Log_Weekly_Sales)
zValue <- xBar / standardError(Diff_Log_Weekly_Sales)
qnorm(-.87)
pnorm(-.87)
rm(zValue)
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
head(Diff_Log_Weekly_Sales)
ndiff <- 2500
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_histogram(binwidth=1 , alpha = .2  )
p3
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 250
## Seeding to ensure the randomness can be repeated
set.seed(100)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 250
## Seeding to ensure the randomness can be repeated
set.seed(100)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
pnorm( zScore )
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 2500
## Seeding to ensure the randomness can be repeated
set.seed(100)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 25000
## Seeding to ensure the randomness can be repeated
set.seed(100)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 2500
## Seeding to ensure the randomness can be repeated
set.seed(100)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 2500
## Seeding to ensure the randomness can be repeated
set.seed(1001)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 2500
## Seeding to ensure the randomness can be repeated
set.seed(1001)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 2500
## Seeding to ensure the randomness can be repeated
set.seed(1101)
## Getting a sample elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
xy <- data.frame( xVar ,  colorVar )
## the plot
p3 <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
p3
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
plottingDensity <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2  )
plottingDensity
plottingDensity <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_y_continuous( "Density" )
plottingDensity
rm( p3 )
plottingDensity <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" , labels=c("Control", "Treatment 1" ) ) +
scale_y_continuous( "Density" )
plottingDensity
plottingDensity <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_continuous( labels=c("Control", "Treatment 1" ) ) +
scale_y_continuous( "Density" )
plottingDensity
plottingDensity <- ggplot( xy , aes(x = xVar, fill = colorVar)) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete( labels=c("Control", "Treatment 1" ) ) +
scale_y_continuous( "Density" )
plottingDensity
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete( labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" )
plottingDensity
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
sampleDensityDf <- data.frame( xVar ,  colorVar )
## the density plot showing the
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete( labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" )
plottingDensity
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
sampleDensityDf <- data.frame( xVar ,  colorVar )
## the density plot showing the
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" )
plottingDensity
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) )
boxPlotDensity
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
0
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) )
boxPlotDensity
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_discrete( "Samples" )
boxPlotDensity
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Samples" )
boxPlotDensity
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
## to be able to plot in grids
library(grid)
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
## to be able to plot in grids
library(gridExtra)
## to be able to plot in grids
library(gridExtra)
install.packages("gridExtra")
## to be able to plot in grids
library(gridExtra)
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "top" )
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Samples" ) +
theme( legend.position = "top" )
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "bottom" )
## box plot to show the Density Distribution
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Distribution" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Samples" ) +
theme( legend.position = "bottom" )
## arranging the plots next to each other
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
rm( xVar , colorVar , sampleDensityDf , plottingDensity , boxPlotDensity)
## removing variables not needed anymore
rm( pValue , zScore , xBar , Diff_Log_Weekly_Sales , Holiday_Sample , NotHoliday_Sample , ndiff )
rm(LogOf_Weekly_Sales)
rm(storeSizeSD)
rm(Weekly_Sales_StdDev, Weekly_Sales_Max)
rm(xy)
rm( xVar , colorVar , sampleDensityDf , plottingDensity , boxPlotDensity, Hyp_Holiday , Hyp_NotHoliday)
