## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "bottom" )
## box plot to show the Density Distribution
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Sample" ) +
theme( legend.position = "bottom" )
## arranging the plots next to each other
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
## removing plots from memory
rm( xVar , colorVar , sampleDensityDf , plottingDensity , boxPlotDensity, Hyp_Holiday , Hyp_NotHoliday)
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
pValue <- 1-pnorm( zScore )
pValue
## removing variables not needed anymore
rm( pValue , zScore , xBar , Diff_Log_Weekly_Sales , Holiday_Sample , NotHoliday_Sample , ndiff )
#########################################################################
#######################
## ThanksGiving & Christmas Season Hypothesis Testing
##############################################################
"2 Weeks Before Thanksgiving" ,
"1 Week Before Thanksgiving" ,
"Thanksgiving" ,
"1 Week After Thanksgiving" ,
"2 Weeks After Thanksgiving" ,
"2 Weeks Before Christmas" ,
"1 Week Before Christmas" ,
"Christmas" ,
"1 Week After Christmas" ,
"2 Weeks After Christmas"
Hyp_NotHoliday <- subset( trainStoresFeaturesMerge , IsHolidaySeason == 0 );
Hyp_Holiday <- subset( trainStoresFeaturesMerge , IsHolidaySeason > 0 );
## Getting the Number of rows in each dataset
nrow( Hyp_NotHoliday )
nrow( Hyp_Holiday )
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 12000
## Seeding to ensure the randomness can be repeated
set.seed(1101)
## Getting a sample of elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
head(Holiday_Sample)
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
head(NotHoliday_Sample)
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
sampleDensityDf <- data.frame( xVar ,  colorVar )
## the density plot showing the
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "bottom" )
## box plot to show the Density Distribution
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Sample" ) +
theme( legend.position = "bottom" )
## arranging the plots next to each other
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
## removing plots from memory
rm( xVar , colorVar , sampleDensityDf , plottingDensity ,
boxPlotDensity, Hyp_Holiday , Hyp_NotHoliday)
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
## 1-pnorm() because we are doing a one-sided test - greater than
pValue <- 1-pnorm( zScore )
pValue
# Model Building
modelNot <- lm( Weekly_Sales ~ . -Log_Weekly_Sales , data = trainNotNANMore )
modelLog <- lm( Log_Weekly_Sales ~ . -Weekly_Sales , data = trainNotNANMore )
summary(trainNotNANMore)
Hyp_NotHoliday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId != 11 && HolidaySeasonId != 12  );
Hyp_Holiday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId != 11 || HolidaySeasonId != 12);
Hyp_NotHoliday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId != 11 && HolidaySeasonId != 12  );
Hyp_Holiday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId == 11 || HolidaySeasonId == 12);
summary(trainStoresFeaturesMerge$HolidaySeasonId)
29576 +29549
275735 + 41292 + 44060
29576 +29549 + 275735 + 41292 + 44060
Hyp_NotHoliday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId != 11 & HolidaySeasonId != 12  );
Hyp_Holiday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId == 11 | HolidaySeasonId == 12);
ndiff <- 5000
## Seeding to ensure the randomness can be repeated
set.seed(1101)
## Getting a sample of elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
head(Holiday_Sample)
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
head(NotHoliday_Sample)
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
sampleDensityDf <- data.frame( xVar ,  colorVar )
## the density plot showing the
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "bottom" )
## box plot to show the Density Distribution
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Sample" ) +
theme( legend.position = "bottom" )
## arranging the plots next to each other
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
## removing plots from memory
rm( xVar , colorVar , sampleDensityDf , plottingDensity ,
boxPlotDensity, Hyp_Holiday , Hyp_NotHoliday)
## Calculating the Difference
Diff_Log_Weekly_Sales = Holiday_Sample - NotHoliday_Sample
## Printing Top 5 values of diff
head(Diff_Log_Weekly_Sales)
## Calculating the Test Statistic
xBar <- mean(Diff_Log_Weekly_Sales)
xBar
## Calculating the Test Statistic
zScore <- xBar / standardError(Diff_Log_Weekly_Sales)
zScore
## Calculating p-value
## 1-pnorm() because we are doing a one-sided test - greater than
pValue <- 1-pnorm( zScore )
pValue
```{r storeTypeScatterBoxGrid}
Hyp_NotHoliday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId != 11 & HolidaySeasonId != 12  );
Hyp_Holiday <- subset( trainStoresFeaturesMerge ,
HolidaySeasonId == 11 | HolidaySeasonId == 12);
## Getting the Number of rows in each dataset
nrow( Hyp_NotHoliday )
nrow( Hyp_Holiday )
## Number of sample elements to collect from population
## should be <10% of holiday Week Population
ndiff <- 5000
## Seeding to ensure the randomness can be repeated
set.seed(1101)
## Getting a sample of elements (ndiff) (<10% of Holiday Weeks)
Holiday_Sample <- sample( Hyp_Holiday$Log_Weekly_Sales , ndiff )
head(Holiday_Sample)
NotHoliday_Sample <- sample( Hyp_NotHoliday$Log_Weekly_Sales , ndiff )
head(NotHoliday_Sample)
## combining both the sample into one x-Axis Variable
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
sampleDensityDf <- data.frame( xVar ,  colorVar )
## the density plot showing the
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "bottom" )
## box plot to show the Density Distribution
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Sample" ) +
theme( legend.position = "bottom" )
## arranging the plots next to each other
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
xVar <- c(NotHoliday_Sample , Holiday_Sample )
## Creating the color Variable
colorVar <- as.factor(c(rep(1, ndiff), rep(2, ndiff ) ) )
## creating the dataframe
sampleDensityDf <- data.frame( xVar ,  colorVar )
## the density plot showing the
## Not Holiday and Holiday values of Log(Weekly_Sales)
plottingDensity <- ggplot( sampleDensityDf , aes(x = xVar, fill = colorVar) ) +
geom_density( alpha = .2 ) +
scale_x_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_y_continuous( "Density" ) +
theme( legend.position = "bottom" )
## box plot to show the Density Distribution
boxPlotDensity <- ggplot( sampleDensityDf , aes( colorVar , xVar ) ) +
geom_boxplot( aes( fill = colorVar ) ) +
scale_y_continuous( "log(Weekly_Sales)" ) +
scale_fill_discrete(
name = "Sample" , labels=c( "Not Holiday", "Holiday" ) ) +
scale_x_discrete( "Sample"  , labels=c( "Not Holiday", "Holiday" ) ) +
theme( legend.position = "bottom" )
## arranging the plots next to each other
grid.arrange( plottingDensity , boxPlotDensity , nrow = 1 )
str(trainStoresFeaturesMerge)
trainStoresFeaturesMerge$TotalSales = trainStoresFeaturesMerge$TotalSalesInMillion = NULL
str(trainStoresFeaturesMerge)
modelNotLog <- lm( Weekly_Sales ~ . -Date -Log_Weekly_Sales , data = trainNotNANMore )
modelNotLog <- lm(
formula = Weekly_Sales ~ . -Date -Log_Weekly_Sales ,
data = trainStoresFeaturesMerge )
modelLog <- lm(
formula = Log_Weekly_Sales ~ . -Date -Weekly_Sales ,
data = trainStoresFeaturesMerge )
summary(trainNotNANMore)
summary(modelNotLog)
summary(modelLog)
rm( pValue , zScore , xBar , Diff_Log_Weekly_Sales , Holiday_Sample , NotHoliday_Sample , ndiff )
rm( xVar , colorVar , sampleDensityDf , plottingDensity ,
boxPlotDensity, Hyp_Holiday , Hyp_NotHoliday)
summary(modelNotLog)
summary(trainStoresFeaturesMerge)
alias(modelNotLog)
trainStoresFeaturesMerge$HolidaySeasonId = NULL
modelNotLog <- lm(
formula = Weekly_Sales ~ . -Date -Log_Weekly_Sales ,
data = trainStoresFeaturesMerge )
modelLog <- lm(
formula = Log_Weekly_Sales ~ . -Date -Weekly_Sales ,
data = trainStoresFeaturesMerge )
summary(modelNotLog)
summary(modelLog)
summary(modelNotLog)
summary( features )
ggplot( storeDeptTotalSalesDataFrame , aes(x = Date, y = Store)) +
geom_tile(aes(fill = MarkDown1)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="Mark Down1") +
scale_y_continuous(name="Store")
ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = MarkDown1)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="Mark Down1") +
scale_y_continuous(name="Store")
str(trainStoresFeaturesMerge)
rm(modelNotLog)
rm(modelLog)
model_Weekly_Sales = lm(
formula = Weekly_Sales =
Store +
Dept +
Type +
IsHoliday +
Size +
Temperature +
Fuel_Price +
MarkDown1 +
MarkDown2 +
MarkDown3 +
MarkDown4 +
MarkDown5 +
CPI +
Unemployment +
HolidaySeasonType +
IsHolidaySeason +
WeekNumber +
Month ,
data = trainStoresFeaturesMerge )
model_Weekly_Sales = lm(
formula = Weekly_Sales =
Store +
Dept +
Type +
IsHoliday +
Size +
Temperature +
Fuel_Price +
MarkDown1 +
MarkDown2 +
MarkDown3 +
MarkDown4 +
MarkDown5 +
CPI +
Unemployment +
HolidaySeasonType +
IsHolidaySeason +
WeekNumber +
Month , data = trainStoresFeaturesMerge )
debugSource('~/Documents/R/KaggleWalmart/Experiment.R')
model_Weekly_Sales = lm(
formula = Weekly_Sales ~
Store + Dept + Type + IsHoliday +  Size +
Temperature + Fuel_Price +
MarkDown1 + MarkDown2 + MarkDown3 + MarkDown4 + MarkDown5 +
CPI + Unemployment +
HolidaySeasonType + IsHolidaySeason +
WeekNumber + Month , data = trainStoresFeaturesMerge )
summary(model_Weekly_Sales)
summary(features)
model_Weekly_Sales = lm(
formula = Weekly_Sales ~
Store + Dept + Type + IsHoliday +  Size +
Temperature + Fuel_Price +
#MarkDown1 + MarkDown2 + MarkDown3 + MarkDown4 + MarkDown5 +
CPI + Unemployment +
HolidaySeasonType + IsHolidaySeason +
WeekNumber + Month , data = trainStoresFeaturesMerge )
summary(model_Weekly_Sales)
ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store")
tapply( features$CPI , features$Store , FUN = mean )
tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_Mean <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_Max <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_Min <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_DF <- data.frame( CPI_Mean , CPI_Max , CPI_Min )
View(CPI_DF)
View(CPI_DF)
CPI_DF$Range <- CPI_DF$CPI_Max - CPI_DF$CPI_Min
CPI_DF[ CPI_DF$Range > 0 ,]
CPI_DF[ CPI_DF$CPI_Mean > 0 ,]
CPI_DF[ CPI_DF$Range > 0 ,]
View(features)
View(features)
View(CPI_DF)
View(CPI_DF)
CPI_DF$CPI_Min = CPI_DF$CPI_Max = CPI_DF$Range = NULL
features1 <- merge( features , CPI_DF , by="Store" )
CPI_DF$Store <- as.integer( rownames( CPI_DF ) )
features1 <- merge( features , CPI_DF , by="Store" )
attributes( features1 )
colnames( features1 )
colnames( features1 )[10]
colnames( features1 )[13]
## Creating Store Column with the RowNAME
CPI_DF$Store <- as.integer( rownames( CPI_DF ) )
## Imputing CPI
## merging the dataframes by Store
features1 <- merge( features , CPI_DF , by="Store" )
## removing old CPI Column
features1$CPI = NULL
## Renaming CPI_Mean to CPI
colnames( features1 )[13] <- "CPI"
colnames( features1 )[12] <- "CPI"
ggplot( features1 , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store")
## overwriting old features with features1 (with no missing values for CPI)
features <- features1
## removing unneccesary data elements
rm( CPI_DF , CPI_Max , CPI_Mean , CPI_Min )
rm( CPI_DF , CPI_Max , CPI_Mean , CPI_Min , features1 )
ncol(features)
summary(features)
ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = Unemployment)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="Unemployment") +
scale_y_continuous(name="Store")
CPI_Mean <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_Max <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_Min <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_DF <- data.frame( CPI_Mean , CPI_Max , CPI_Min )
CPI_DF$Range <- CPI_DF$CPI_Max - CPI_DF$CPI_Min
## Checking if there is a difference between Max and Min
## - if no change then no rows
CPI_DF[ CPI_DF$Range != 0 ,]
rm( CPI_DF , CPI_Max , CPI_Mean , CPI_Min , features1 )
## Unemployment MEAN, MAX MIN & Range tabulated into a Data Frame
Unemployment_Mean <-
tapply( features$Unemployment , features$Store , FUN = mean , na.rm= T )
Unemployment_Max <-
tapply( features$Unemployment , features$Store , FUN = mean , na.rm= T )
Unemployment_Min <-
tapply( features$Unemployment , features$Store , FUN = mean , na.rm= T )
Unemployment_DF <-
data.frame( Unemployment_Mean , Unemployment_Max , Unemployment_Min )
Unemployment_DF$Range <- CPI_DF$CPI_Max - CPI_DF$CPI_Min
## Checking if there is a difference between Max and Min
## - if no change then no rows
Unemployment_DF[ Unemployment_DF$Range != 0 ,]
## Unemployment MEAN, MAX MIN & Range tabulated into a Data Frame
Unemployment_Mean <-
tapply( features$Unemployment , features$Store , FUN = mean , na.rm= T )
Unemployment_Max <-
tapply( features$Unemployment , features$Store , FUN = mean , na.rm= T )
Unemployment_Min <-
tapply( features$Unemployment , features$Store , FUN = mean , na.rm= T )
Unemployment_DF <-
data.frame( Unemployment_Mean , Unemployment_Max , Unemployment_Min )
Unemployment_DF$Range <- CPI_DF$Unemployment_Max - CPI_DF$Unemployment_Min
## Checking if there is a difference between Max and Min
## - if no change then no rows
Unemployment_DF[ Unemployment_DF$Range != 0 ,]
Unemployment_DF$Range <- Unemployment_DF$Unemployment_Max - Unemployment_DF$Unemployment_Min
## Checking if there is a difference between Max and Min
## - if no change then no rows
Unemployment_DF[ Unemployment_DF$Range != 0 ,]
Unemployment_DF[ Unemployment_DF$Range > 0 ,]
View(Unemployment_DF)
View(Unemployment_DF)
features <- read.csv("Data/features.csv")
## heatmap to undersatnd where CPI is missing
ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store")
## CPI MEAN, MAX MIN & Range tabulated into a Data Frame
CPI_Mean <- tapply( features$CPI , features$Store , FUN = mean , na.rm= T )
CPI_Max <- tapply( features$CPI , features$Store , FUN = max , na.rm= T )
CPI_Min <- tapply( features$CPI , features$Store , FUN = min , na.rm= T )
CPI_DF <- data.frame( CPI_Mean , CPI_Max , CPI_Min )
CPI_DF$Range <- CPI_DF$CPI_Max - CPI_DF$CPI_Min
## Checking if there is a difference between Max and Min
## - if no change then no rows
CPI_DF[ CPI_DF$Range != 0 ,]
ggplot( features , aes(x = Date, y = mean(CPI) ) ) +
geom_line() +
scale_y_continuous(name="Store" )
ggplot( features , aes(x = Date, y = mean(CPI) ) ) +
geom_line( aes( group=1) ) +
scale_y_continuous(name="Store" )
ggplot( features , aes(x = Date, y = mean(CPI) ) ) +
geom_point() +
scale_y_continuous(name="Store" )
meanCPIAcossStores <- tapply( features$CPI , features$Date , FUN = mean )
meanCPIAcrossStores <- tapply( features$CPI , features$Date , FUN = mean )
meanCPIAcrossStoresDF <- data.frame( meanCPIAcrossStoresDF )
meanCPIAcrossStores <- tapply( features$CPI , features$Date , FUN = mean )
meanCPIAcrossStoresDF <- data.frame( meanCPIAcrossStoresDF )
meanCPIAcrossStores <- tapply( features$CPI , features$Date , FUN = mean )
meanCPIAcrossStoresDF <- data.frame( meanCPIAcrossStores )
ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store" )
meanCPIAcrossStoresDF$Date <- as.Date( rownames( meanCPIAcrossStoresDF ) )
View(meanCPIAcrossStoresDF)
View(meanCPIAcrossStoresDF)
ggplot( meanCPIAcrossStoresDF , aes(x = Date, y = meanCPIAcrossStores ) ) +
geom_line() +
scale_y_continuous(name="MEAN CPI Across All Stores" )
grid.arrange(missingCPIHeatMap , avgCPiIndexTrend , ncol = 1 )
missingCPIHeatMap <- ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store" )
## trend of Average CPI Across All Stores
avgCPiIndexTrend <- ggplot( meanCPIAcrossStoresDF , aes(x = Date, y = meanCPIAcrossStores ) ) +
geom_line() +
scale_y_continuous(name="MEAN CPI Across All Stores" )
grid.arrange(missingCPIHeatMap , avgCPiIndexTrend , ncol = 1 )
missingCPIHeatMap <- ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store" ) +
theme( legend.position = "bottom" )
## trend of Average CPI Across All Stores
avgCPiIndexTrend <- ggplot( meanCPIAcrossStoresDF , aes(x = Date, y = meanCPIAcrossStores ) ) +
geom_line() +
scale_y_continuous(name="MEAN CPI Across All Stores" )
grid.arrange(missingCPIHeatMap , avgCPiIndexTrend , ncol = 1 )
missingCPIHeatMap <- ggplot( features , aes(x = Date, y = Store)) +
geom_tile(aes(fill = CPI)) +
scale_fill_gradient(low="yellow", high="red" , labels = comma , name="CPI") +
scale_y_continuous(name="Store" ) +
theme( legend.position = "bottom" )
## trend of Average CPI Across All Stores
avgCPiIndexTrend <- ggplot( meanCPIAcrossStoresDF , aes(x = Date, y = meanCPIAcrossStores ) ) +
geom_line() +
scale_y_continuous(name="MEAN CPI Across All Stores" ) +
stat_smooth( method = "lm" )
grid.arrange(missingCPIHeatMap , avgCPiIndexTrend , ncol = 1 )
